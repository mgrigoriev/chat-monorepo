// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/mgrigoriev/chat-monorepo/chatmessages/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// ChatMessagesStorage is an autogenerated mock type for the ChatMessagesStorage type
type ChatMessagesStorage struct {
	mock.Mock
}

// CreateChatMessage provides a mock function with given fields: ctx, chatMessage
func (_m *ChatMessagesStorage) CreateChatMessage(ctx context.Context, chatMessage models.ChatMessage) (models.ChatMessageID, error) {
	ret := _m.Called(ctx, chatMessage)

	if len(ret) == 0 {
		panic("no return value specified for CreateChatMessage")
	}

	var r0 models.ChatMessageID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ChatMessage) (models.ChatMessageID, error)); ok {
		return rf(ctx, chatMessage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ChatMessage) models.ChatMessageID); ok {
		r0 = rf(ctx, chatMessage)
	} else {
		r0 = ret.Get(0).(models.ChatMessageID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ChatMessage) error); ok {
		r1 = rf(ctx, chatMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateChatMessages provides a mock function with given fields: ctx, userID, otherUserID
func (_m *ChatMessagesStorage) GetPrivateChatMessages(ctx context.Context, userID models.UserID, otherUserID models.UserID) (*[]models.ChatMessage, error) {
	ret := _m.Called(ctx, userID, otherUserID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateChatMessages")
	}

	var r0 *[]models.ChatMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID, models.UserID) (*[]models.ChatMessage, error)); ok {
		return rf(ctx, userID, otherUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID, models.UserID) *[]models.ChatMessage); ok {
		r0 = rf(ctx, userID, otherUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.ChatMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID, models.UserID) error); ok {
		r1 = rf(ctx, userID, otherUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerChatMessages provides a mock function with given fields: ctx, serverID
func (_m *ChatMessagesStorage) GetServerChatMessages(ctx context.Context, serverID models.ChatServerID) (*[]models.ChatMessage, error) {
	ret := _m.Called(ctx, serverID)

	if len(ret) == 0 {
		panic("no return value specified for GetServerChatMessages")
	}

	var r0 *[]models.ChatMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ChatServerID) (*[]models.ChatMessage, error)); ok {
		return rf(ctx, serverID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ChatServerID) *[]models.ChatMessage); ok {
		r0 = rf(ctx, serverID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.ChatMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ChatServerID) error); ok {
		r1 = rf(ctx, serverID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChatMessagesStorage creates a new instance of ChatMessagesStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatMessagesStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatMessagesStorage {
	mock := &ChatMessagesStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
