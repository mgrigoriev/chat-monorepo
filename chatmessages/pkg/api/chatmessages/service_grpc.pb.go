// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: api/chatmessages/service.proto

package chatmessages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatMessagesService_SaveChatMessage_FullMethodName         = "/github.com.mgrigoriev.chat_monorepo.chatmessages.ChatMessagesService/SaveChatMessage"
	ChatMessagesService_ListPrivateChatMessages_FullMethodName = "/github.com.mgrigoriev.chat_monorepo.chatmessages.ChatMessagesService/ListPrivateChatMessages"
	ChatMessagesService_ListServerChatMessages_FullMethodName  = "/github.com.mgrigoriev.chat_monorepo.chatmessages.ChatMessagesService/ListServerChatMessages"
)

// ChatMessagesServiceClient is the client API for ChatMessagesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatMessagesServiceClient interface {
	// SaveChatMessage - сохранить сообщение
	SaveChatMessage(ctx context.Context, in *SaveChatMessageRequest, opts ...grpc.CallOption) (*SaveChatMessageResponse, error)
	// ListPrivateChatMessages - получить список сообщений переписки пользователя с другим пользователем
	ListPrivateChatMessages(ctx context.Context, in *ListPrivateChatMessagesRequest, opts ...grpc.CallOption) (*ListChatMessagesResponse, error)
	// ListServerChatMessagesRequest - запрос на получение сообщений сервера
	ListServerChatMessages(ctx context.Context, in *ListServerChatMessagesRequest, opts ...grpc.CallOption) (*ListChatMessagesResponse, error)
}

type chatMessagesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatMessagesServiceClient(cc grpc.ClientConnInterface) ChatMessagesServiceClient {
	return &chatMessagesServiceClient{cc}
}

func (c *chatMessagesServiceClient) SaveChatMessage(ctx context.Context, in *SaveChatMessageRequest, opts ...grpc.CallOption) (*SaveChatMessageResponse, error) {
	out := new(SaveChatMessageResponse)
	err := c.cc.Invoke(ctx, ChatMessagesService_SaveChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMessagesServiceClient) ListPrivateChatMessages(ctx context.Context, in *ListPrivateChatMessagesRequest, opts ...grpc.CallOption) (*ListChatMessagesResponse, error) {
	out := new(ListChatMessagesResponse)
	err := c.cc.Invoke(ctx, ChatMessagesService_ListPrivateChatMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMessagesServiceClient) ListServerChatMessages(ctx context.Context, in *ListServerChatMessagesRequest, opts ...grpc.CallOption) (*ListChatMessagesResponse, error) {
	out := new(ListChatMessagesResponse)
	err := c.cc.Invoke(ctx, ChatMessagesService_ListServerChatMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatMessagesServiceServer is the server API for ChatMessagesService service.
// All implementations must embed UnimplementedChatMessagesServiceServer
// for forward compatibility
type ChatMessagesServiceServer interface {
	// SaveChatMessage - сохранить сообщение
	SaveChatMessage(context.Context, *SaveChatMessageRequest) (*SaveChatMessageResponse, error)
	// ListPrivateChatMessages - получить список сообщений переписки пользователя с другим пользователем
	ListPrivateChatMessages(context.Context, *ListPrivateChatMessagesRequest) (*ListChatMessagesResponse, error)
	// ListServerChatMessagesRequest - запрос на получение сообщений сервера
	ListServerChatMessages(context.Context, *ListServerChatMessagesRequest) (*ListChatMessagesResponse, error)
	mustEmbedUnimplementedChatMessagesServiceServer()
}

// UnimplementedChatMessagesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatMessagesServiceServer struct {
}

func (UnimplementedChatMessagesServiceServer) SaveChatMessage(context.Context, *SaveChatMessageRequest) (*SaveChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveChatMessage not implemented")
}
func (UnimplementedChatMessagesServiceServer) ListPrivateChatMessages(context.Context, *ListPrivateChatMessagesRequest) (*ListChatMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrivateChatMessages not implemented")
}
func (UnimplementedChatMessagesServiceServer) ListServerChatMessages(context.Context, *ListServerChatMessagesRequest) (*ListChatMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServerChatMessages not implemented")
}
func (UnimplementedChatMessagesServiceServer) mustEmbedUnimplementedChatMessagesServiceServer() {}

// UnsafeChatMessagesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatMessagesServiceServer will
// result in compilation errors.
type UnsafeChatMessagesServiceServer interface {
	mustEmbedUnimplementedChatMessagesServiceServer()
}

func RegisterChatMessagesServiceServer(s grpc.ServiceRegistrar, srv ChatMessagesServiceServer) {
	s.RegisterService(&ChatMessagesService_ServiceDesc, srv)
}

func _ChatMessagesService_SaveChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMessagesServiceServer).SaveChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatMessagesService_SaveChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMessagesServiceServer).SaveChatMessage(ctx, req.(*SaveChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMessagesService_ListPrivateChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrivateChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMessagesServiceServer).ListPrivateChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatMessagesService_ListPrivateChatMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMessagesServiceServer).ListPrivateChatMessages(ctx, req.(*ListPrivateChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatMessagesService_ListServerChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServerChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMessagesServiceServer).ListServerChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatMessagesService_ListServerChatMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMessagesServiceServer).ListServerChatMessages(ctx, req.(*ListServerChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatMessagesService_ServiceDesc is the grpc.ServiceDesc for ChatMessagesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatMessagesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.mgrigoriev.chat_monorepo.chatmessages.ChatMessagesService",
	HandlerType: (*ChatMessagesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveChatMessage",
			Handler:    _ChatMessagesService_SaveChatMessage_Handler,
		},
		{
			MethodName: "ListPrivateChatMessages",
			Handler:    _ChatMessagesService_ListPrivateChatMessages_Handler,
		},
		{
			MethodName: "ListServerChatMessages",
			Handler:    _ChatMessagesService_ListServerChatMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/chatmessages/service.proto",
}
